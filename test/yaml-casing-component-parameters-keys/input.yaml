openapi: 3.0.3
info:
  description: |-
    this is a sample Pet Store Server based on the OpenAPI 3.0 specification. you can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  version: 1.0.6-SNAPSHOT
  title: Swagger Petstore - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: /v3
paths:
  /pet:
    post:
      operationId: addPet
      summary: add a new pet to the store
      description: add a new pet to the store
      parameters:
        - $ref: '#/components/headers/X-RateLimit-Limit'
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/reqBodyPet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetModel'
          application/xml:
            schema:
              $ref: '#/components/schemas/PetModel'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  properties:
                    type: string
                  idPet:
                    type: integer
                    format: int64
                    example: 10
                  namePet:
                    type: string
                    example: doggie
                  pet-model:
                    $ref: '#/components/responses/GeneralError'
            application/xml:
              schema:
                $ref: '#/components/schemas/PetModel'
        '405':
          description: Invalid input
      security:
        - PetstoreAuth:
            - 'write:pets'
            - 'read:pets'
      tags:
        - pet
  /PetModel/findByStatus:
    get:
      operationId: findPetsByStatus
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/X-RateLimit-Limit'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetModel'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetModel'
        '400':
          description: Invalid status value
      security:
        - ApiKey: []
        - PetstoreAuth:
            - 'write:pets'
            - 'read:pets'
      tags:
        - pet
  '/pet/{petId}':
    get:
      operationId: getPetById
      summary: Find pet by ID
      description: Returns a single pet
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/PetModel'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - ApiKey: []
        - PetstoreAuth:
            - 'write:pets'
            - 'read:pets'
      tags:
        - pet
    post:
      operationId: updatePetWithForm
      summary: Updates a pet in the store with form data
      description: ''
      parameters:
        - $ref: '#/components/parameters/petId'
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - PetstoreAuth:
            - 'write:pets'
            - 'read:pets'
      tags:
        - pet
    delete:
      operationId: deletePet
      summary: Deletes a pet
      description: ''
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - PetstoreAuth:
            - 'write:pets'
            - 'read:pets'
      tags:
        - pet
  /store/order:
    post:
      operationId: placeOrder
      summary: Place an order for a pet
      description: Place a new order in the store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderModel'
          application/xml:
            schema:
              $ref: '#/components/schemas/OrderModel'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderModel'
        '405':
          description: Invalid input
      tags:
        - store
      x-swagger-router-controller: OrderController
  '/user/{username}':
    get:
      operationId: getUserByName
      summary: Get user by user name
      description: ''
      parameters:
        - name: userName
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserModel'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      tags:
        - user
    put:
      operationId: updateUser
      summary: Update user
      description: This can only be done by the logged in user.
      parameters:
        - name: userName
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'
            examples:
              sample-example-reports:
                $ref: '#/components/examples/sample-example-reports'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserModel'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserModel'
      responses:
        default:
          description: successful operation
      tags:
        - user
      x-swagger-router-controller: UserController
components:
  schemas:
    ErrorModel:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    OrderModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        sites:
          type: array
          items:
            type: object
            properties:
              siteUrl:
                type: string
                example: www.example.com
              domainName:
                type: string
                example: example.com
              meta:
                type: object
                properties:
                  extInt:
                    type: string
                    example: com
                  secureConn:
                    type: string
                    example: https
                  properties:
                    type: string
                    example: https
        status:
          description: Order Status
          type: string
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      x-swagger-router-model: io.swagger.petstore.model.Order
      xml:
        name: order
    CustomerModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          items:
            $ref: '#/components/schemas/AddressModel'
          xml:
            wrapped: true
            name: addresses
      xml:
        name: customer
    AddressModel:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: 94301
      xml:
        name: address
    CategoryModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      x-swagger-router-model: io.swagger.petstore.model.Category
      xml:
        name: category
    UserModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        emailAddress:
          type: string
          example: john@email.com
        phoneNumber:
          type: string
          example: 12345
        userStatus:
          description: User Status
          type: integer
          format: int32
          example: 1
      x-swagger-router-model: io.swagger.petstore.model.User
      xml:
        name: user
    TagModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      x-swagger-router-model: io.swagger.petstore.model.Tag
      xml:
        name: tag
    PetModel:
      type: object
      properties:
        properties:
          type: string
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/CategoryModel'
        photoUrls:
          type: array
          items:
            type: string
            xml:
              name: photoUrl
          xml:
            wrapped: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagModel'
          xml:
            wrapped: true
        status:
          description: pet status in the store
          type: string
          enum:
            - available
            - pending
            - sold
      required:
        - name
        - photoUrls
      x-swagger-router-model: io.swagger.petstore.model.Pet
      xml:
        name: pet
  examples:
    sample-example-reports:
      value:
        id: bbadbeef-b3ab-40af-b05c-c0ffee6544cd
        created: '2020-06-19T12:01:03.456Z'
        lastAction: '2020-06-19T12:06:03.456Z'
        status: Succeeded
        type: ListExport
        resourceLocation: 'https://customername.example/export'
        properties:
          reportLocation: 'https://customername.example/reports/ABC-123-DEF-456'
    sample-send-notification:
      value:
        - reference: 1234567ABC
          to:
            deviceToken: 1234567890AZERTYUIOP
            provider: apple
          content:
            title: 'Hello world, content title'
            message: 'Hello world, content message'
            badge: null
            sound: null
            buttons: []
            pushType: 2
            inAppNotification:
              title: 'Hello world, inAppNotification title'
              body: 'Hello world, inAppNotification body'
            expirationdate: null
            data:
              SMLTR_DEL_STATE: '2'
              SMLTR_DEL_RETRY_CNT: '1'
          tags:
            - tag1
            - tag 2
      summary: A payload example for a notification
  parameters:
    petId:
      name: petId
      in: path
      description: ID of pet to return
      required: true
      schema:
        type: integer
        format: int64
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
    X-RateLimit-Limit:
      name: X-RateLimit-Limit
      description: Request limit per hour
      in: header
      schema:
        type: integer
      example: 100
    X-RateLimit-Remaining:
      name: X-RateLimit-Remaining
      description: Remaining requests for the hour
      in: header
      schema:
        type: integer
      example: 94
  responses:
    GeneralError:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/'
    GeneralPet:
      description: Pet Model
      content:
        application/json:
          schema:
            type: object
            properties:
              properties:
                type: string
              idPet:
                type: integer
                format: int64
                example: 10
              namePet:
                type: string
                example: doggie
              pet-model:
                $ref: '#/components/responses/GeneralError'
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/X-RateLimit-Remaining'
  requestBodies:
    reqBodyPet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PetModel'
        application/xml:
          schema:
            $ref: '#/components/schemas/PetModel'
      description: Pet object that needs to be added to the store
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserModel'
      description: List of user object
  securitySchemes:
    PetstoreAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    ApiKey:
      type: apiKey
      name: api_key
      in: header
  headers:
    X-RateLimit-Limit:
      description: Request limit per hour
      schema:
        type: integer
      example: 100
    X-RateLimit-Remaining:
      description: Remaining requests for the hour
      schema:
        type: integer
      example: 94
    X-RateLimit-Unused:
      description: Remaining requests for the hour
      schema:
        type: integer
      example: 94
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
